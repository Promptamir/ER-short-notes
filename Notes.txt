Requirements: User Requirement Specification (end-user requirements for a system) and Functional Requirement Specification (What the system must do)
|
.
Conceptual Design: The requirements of database are captured using high level conceptual data model. For Example, the ER model is used for the conceptual design of the database.
|
.
Logical Design: Logical Design represents data in the form of relational model. ER diagram produced in the conceptual design phase is used to convert the data into the Relational Model. 
|
.
Physical Design: In physical design, data in relational model is implemented using commercial DBMS like Oracle, DB2.
#TODO MUST READ https://stackoverflow.com/questions/1761533/database-alternatives

Two major pitfalls in designing a database schema:
1. Redundancy : Multiple copies of the same information are stored in more than one place at a time. (Unnecessarily).
2. Incompleteness : When a fact (tuple) has to be inserted in a relation, and values for some required columns are missing.

The Entity-Relationship (E-R) data model: It was developed to facilitate database design by allowing specification of an enterprise schema that represents the overall logical structure of a database.

Entity set : It's a "thing" or "object" in the real world that is distinguishable from all other objects. ex: Each person in a university is an entity.
An entity has a set of properties, and the values for some set of properties must uniquely identify an entity.
An entity set is a set of entities of the same type that share the same properties or attributes.
Extension : Extension of the entity set refers to the actual collection of entities belonging to the entity set.
Attributes : Descriptive properties set expresses that the database stores similar information concerning each entity in the entity set and each entity may have its own value for each attribute.
Each entity has a value for each of its attributes. For instance, a particular instructor entity may have the value 12121 for ID.
An attribute of a relationship set represents in a E-R diagram by an undivided rectangle.

Relation set : A relationship is an association among several entities. 
A relationship instance is an E-R schema represents an association between the named entities in the real-world enterprise that is being modeled.
A relationship set is represented in an E-R diagram by a diamond, which is linked via lines to a number of different entity sets (rectangles).
The function that an entity plays in a relationship is called that entity's role.
Recursive relationship set : When the entity sets of a relationship set are not distinct; that is, the same entity set participates in a relationship set more than once, in different roles.
Descriptive attributes : The attribute(s) used for describing the relationship is called descriptive attributes, also referred as relationship attributes.
Binary relationship : One that involves two entity sets.
Degree of the relationship set : The number of entity sets that participate in a relationship set.
Ternary relationship set :  It's a set of degree 3.

Type of attributes : #TODO MUST READ https://www.gatevidyalay.com/types-of-attributes/
    1. Simple attributes : Not have been divided into subparts
    2. Composite attributes :  They can be divided into subparts.
    3. Single valued attributes : Attributes in an entity that refers to only one value.
    4. Multi valued attributes : Attributes in an entity that refers to multiple values.
    5. Derived attributes : If a attribute's value can be derived from the values of other attributes, then the attributes is derivable, and is said to be a derived attribute.
    6. Key attributes : It's a data item which is used to identify a record or a value used to identify a record in a database.
 
null : An attribute takes a null value when an entity does not have a value for it. the null value may indicate "not applicable"--that is, the value does not exist for the entity.

Mapping Cardinalities ( Cardinality ratios) : It expresses the number of entities to which another entity can be associated via a relationship set.

For a binary relationship set R between entity sets A and B, the mapping cardinality must be one of the following :
    1. One-to-one (1:1) : An entity in A is associated with at most one entity in B, and an entity in B is associated with at most one entity in A.
	2. One-to-many (1:N) : An entity in A is associated with any number (zero or more) of entities in B. An entity in B, however, can be associated with at most one entity in A.
	3. Many-to-one (N:1) : An entity in A is associated with at most one entity in B. An entity in B, however, can be associated with any number (zero or more) of entities in A.
	4. Many-to-many (N:N) : An entity in A is associated with any number (zero or more) of entities.
In te E-R diagram notation, we indicate cardinality constraints on a relationship by drawing either a directed line ( --> | Many to one ) or an undirected line ( -- | Many to many) between the relationship set.

ps: m:n is used to denote a many-to-many relationship (m objects on the other side related to n on the other) while 1:n refers to a one-to-many relationship (1 object on the other side related to n on te other.)
1:n --> "one-to-many"
n:m n:n --> "many-to-many"


#TODO MUST READ https://www.ques10.com/p/9460/explain-total-participation-and-partial-participat/

Participation Constraints : Participation Constraints tell us that the participation in a relationship can either be total or partial. 
Total participation : When each entity in an entity set participates in a relation. (R = E)
Partial participation : When all entities in the given entity set do not participate in a relation. (R - E)

Cardinality limits :  A line may have an associated minimum and maximum cardinality, shown in the form l..h, where l is the minimum and h the maximum cardinality. Maximum value * indicates no limit.
ex:
	|instruct|								     | stud.|
	|________|----0..*---- advisor -1..1-  |_______|
	|________|									|_______|
	
	1..1 : min and max cardinality are both 1 (each student must have exactly one advisor)
    0.. * : It indicates that instructor can have zero or more students.

Types of keys in DBMS :

#TODO MUST READ https://www.javatpoint.com/dbms-keys
	1. Primary key : It is the first key used to identify one and only one instance of an entity uniquely.
	2. Candidate key : It is an attribute or set of attributes that can uniquely identify a tuple that it's as strong as the primary key.
	3. Super key : Super key is an attribute set that can uniquely identify a tuple. A super key is a superset of a candidate key.
	4. Foreign key : It is the column of the table use to point to the primary key of another table.
	5. Alternate key : -
	6. Composite key : -
	7. Artificial key : -

** Primary Key ** : 
 
 We must have a way to specify how entities within a given entity set and relationships within a given relationship set are distinguished.
 Entity sets : Conceptually, individual entities are distinct; from a database perspective, however, the differences among them must be expressed in terms of their attributes. Therefore, the values of the attribute values of an entity must be such that they can uniquely indentify the entity. In other words. no two entities in an entity set are allowed to have exactly the same value for all attributes.
 Relationships : We need a mechanism to distinguish among the various relationships of a relationship set.
 
 #TODO MUST READ https://opentextbc.ca/dbdesign01/
 The choice of the primary key for a binary relationship set depends on the mapping cardinality of the relationship set : 
 
 1. Many-to-many relationships : The preceding union of the primary keys is a minimal super key and is chosen as the primary key :
 The entity sets instructor and student, and the relationship set advisor. Suppose that the relationship set is many-to-many. Then the primary key of advisor consists of the union of the primary keys of instructor and student.
 2. One-to-many and many-to-one relationships : The primary key of the "many" side is a minimal super key and is used as the primary key :
 If the relationship is many-to-one from student to instructor-that is, each student can have at most one advisor-then the primary key of advisor is simply the primary key of student. However, if an instructor can advise only one student-that is, if the advisor relationship is many-to-one from instructor to student-then the primary key of advisor is simply the primary key of instructor.
 3. One-to-one relationships : The primary key of either one of the participating entity sets forms a minimal super key, and either on can be chosen as the primary key of the relationship set :
 If an instructor can advise only one student,, and each student can be advised by only one instructor-that is, if the advisor relationship is one-to-one-then the primary key of either student or instructor can be chosen as the primary key for advisor.
 4. For non-binary relationships, if no cardinality constraints are present, then the super key formed is the only candidate key, and it is chosen as primary key.
 The choice of the primary key is more complicated if cardinality constraints are present. we permit at most one arrow out of a relationship set. We do so because an E-R diagram with two or more arrows out of a non-binary relationship set can be interpreted in the two ways we describe below
 Suppose there is a relationship set R between entity sets E1, E2, E3, E4, and the only arrows are on the edges to entity sets E3 and E4. Then, the two possible interpretations are :
 1. A particular combination  of entities from E1, E2 can be associated with at most one combination of entities from E3, E4. Thus, the primary key for the relationship R can be constructed by the union of the primary keys of E1 and E2
 2. A particular combination of entities from E1, E2, E3 can be associated with at most one combination of entities from E4, and further a particular combination of entities from E1, E2, E4 can be associated with at most one combination of entities from E3, Then the union of the primary keys of E1, E2, and E3 forms a candidate key, as does the union of the primary keys of E1, E2, and E4.
 
 In order to represent a situation where on the the multiple-arrow situations holds, the E-R design can be modified by replacing the non-binary relationship set with an entity set. That is, we treat each instance of the non-binary relationship set with an entity set.
 That is, we treat instance of the non-binary relationship set as in entity.
 Then we can relate each of those entities to corresponding instances of E1, E2, E4 via separate relationship sets. A simpler approach is to use functional dependencies,
 Functional dependencies which allow either of these interpretations to be specified simply in a unambiguous manner.
 The primary key for the relationship set R is then union of the primary keys of those participating entity sets Ei that do not have an incoming arrow from the relationship set R.
 
 Weak entity set : It is one whose existence us dependent on another entity set, called its identifying entity set; instead of associating a primary key with a weak entity, we use the primary key of the identifying entity, along with extra attributes, called discriminator attributes to uniquely identify a weak entity. An entity set that is not a weak entity set termed a strong entity set.
 Every weak entity must b associated with an identifying entity; that is, the weak entity set is said to be existence dependent on the identifying entity set. The identifying entity set is said to own the weak entity set that is identifies.
 The relationship associating the weak entity set with the identifying entity set is called the identifying relationship.
 The identifying relationship is many-to-one from the weak entity set to the identifying entity set, and the participation of the weak entity set in the relationship is total.
 Weak entities are represented with double rectangular box in the ER Diagram and the identifying relationships are represented with double diamond. Partial Key attributes are represented with dotted lines.
 Partial key is an attribute of a weak entity type that combined with the identifying relationships will identify entities of the entity type.

 Removing Redundant Attributes in Entity Sets :
 Data redundancy occurs in database systems which have a field that is repeated in two or more tables.
 Duplicated data is present when an attribute has two ( or more ) identical values. A data value is redundant if you can delete it without information being list. In other words, redundancy is unnecessary duplication.
 #TODO MUST READ https://www.relationaldbdesign.com/database-analysis/module3/reduce-data-redundancy.php
 Normalization and removing Duplication in Data :
 It means to make normal of causing something to conform to a standard, or to introduce consistency with respect to style and content. In terms of relational modeling, that consistency becomes a process of removing duplication in data.
 
 Reducing E-R Diagrams to Relational Schemas :
 
 Step 1 - Conversion of strong entities 
 For each strong entity create a separate table with the same name.
 Includes all attributes, if there is any composite attribute divided into simple attributes and has to be included.
 Ignore multivalued attributes at this stage.
 Select the p key for the table.
 
 Step 2 - Conversion of weak entity
 For each weak entity create a separate table with the same name.
 Include all attributes.
 Include the P key of a strong entity as foreign key is the weak entity.

 Step 3 - Conversion of one-to-one relationship
 For each one to many relationships, modify the M side to include the P key of one side as foreign key.
 IF relationship consist of attributes, include them also in the new table.

 Step 4 - Conversion of one-to-many relationship
 For each one to one relation, say A and B modify either A side or B side to include the P key of the other side as a foreign key.
 If A or B is having total participation, then that should be a modified table.
 If a relationship consists of attributes, include them also in the modified table

 Step 5 - Conversion of many-many relationship
 For each many-many relationship, create a separate table including the P key of M side and N side as foreign keys in the new table.
 Declare the combination of foreign keys as P for the new table.
 If relationships consist of attributes, include them also in the new table.

 Step 6 - Conversion of multivalued attributes
 For each multivalued attribute create a separate table and include the P key of the present table as foreign key.
 Declare the combination of foreign key and multivalued attribute as P keys.

 Step 7 - Conversion of n-ary relationship
 For each n-ary relationship create a separate table and include the P key of all entities as foreign key.
 Declare the combination of foreign keys as P key.
 
 Features of ER model :
 Specialization - An entity set broken down sub-entities that are distinct in some way from other entities in the set. For instance, a subset of entities within an entity set may have attributes that are not shared by all the entities in the entity set. The E-R model provides a means for representing these distinctive entity groupings.
 Generalization - It is a process of extracting common properties from a set of entities and creating a generalized entity from it. Generalization is a “Bottom-up approach”. In which two or more entities can be combined to form a higher-level entity if they have some attributes in common.
 Inheritance – An entity that is a member of a subclass inherits all the attributes of the entity as the member of the superclass, the entity also inherits all the relationships that the superclass participates in. Inheritance is an important feature of Generalization and Specialization. It allows lower-level entities to inherit the attributes of higher-level entities.
 Aggregation – In aggregation, the relation between two entities is treated as a single entity. In aggregation, the relationship with its corresponding entities is aggregated into a higher-level entity.
 
 Entity-Relationship Design Issues :
 Use of Entity Set vs Attributes
 Use of Entity Set vs. Relationship Sets
 Use of Binary vs n-ary Relationship Sets
 Placing Relationship Attributes
 
 Other Aspects of Database Design :
 Functional Requirements
 Data Flow, Workflow
 Schema Evolution
 

 Summary
• Database design mainly involves the design of the database schema. The entity-
relationship (E-R) data model is a widely used data model for database design.
It provides a convenient graphical representation to view data, relationships, and
constraints.
• The E-R model is intended primarily for the database-design process. It was de-
veloped to facilitate database design by allowing the specification of an enterprise
schema. Such a schema represents the overall logical structure of the database.
This overall structure can be expressed graphically by an E-R diagram.
Review Terms 293
• An entity is an object that exists in the real world and is distinguishable from other
objects. We express the distinction by associating with each entity a set of attributes
that describes the object.
• A relationship is an association among several entities. A relationship set is a col-
lection of relationships of the same type, and an entity set is a collection of entities
of the same type.
• The terms superkey, candidate key, and primary key apply to entity and relation-
ship sets as they do for relation schemas. Identifying the primary key of a relation-
ship set requires some care, since it is composed of attributes from one or more of
the related entity sets.
• Mapping cardinalities express the number of entities to which another entity can
be associated via a relationship set.
• An entity set that does not have sufficient attributes to form a primary key is termed
a weak entity set. An entity set that has a primary key is termed a strong entity set.
• The various features of the E-R model offer the database designer numerous
choices in how to best represent the enterprise being modeled. Concepts and ob-
jects may, in certain cases, be represented by entities, relationships, or attributes.
Aspects of the overall structure of the enterprise may be best described by using
weak entity sets, generalization, specialization, or aggregation. Often, the designer
must weigh the merits of a simple, compact model versus those of a more precise,
but more complex one.
• A database design specified by an E-R diagram can be represented by a collection of
relation schemas. For each entity set and for each relationship set in the database,
there is a unique relation schema that is assigned the name of the corresponding
entity set or relationship set. This forms the basis for deriving a relational database
design from an E-R diagram.
• Specialization and generalization define a containment relationship between a
higher-level entity set and one or more lower-level entity sets. Specialization is
the result of taking a subset of a higher-level entity set to form a lower-level entity
set. Generalization is the result of taking the union of two or more disjoint (lower-
level) entity sets to produce a higher-level entity set. The attributes of higher-level
entity sets are inherited by lower-level entity sets.
• Aggregation is an abstraction in which relationship sets (along with their asso-
ciated entity sets) are treated as higher-level entity sets, and can participate in
relationships.
• Care must be taken in E-R design. There are a number of common mistakes to
avoid. Also, there are choices among the use of entity sets, relationship sets, and
294 Chapter 6 Database Design Using the E-R Model
attributes in representing aspects of the enterprise whose correctness may depend
on subtle details specific to the enterprise.
• UML is a popular modeling language. UML class diagrams are widely used for
modeling classes, as well as for general-purpose data modeling.

Review Terms
• Design Process
° Conceptual-design
° Logical-design
° Physical-design
• Entity-relationship (E-R) data model
• Entity and entity set
° Simple and composite attributes
° Single-valued and multivalued at-
tributes
° Derived attribute
• Key
° Superkey
° Candidate key
° Primary key
• Relationship and relationship set
° Binary relationship set
° Degree of relationship set
° Descriptive attributes
° Superkey, candidate key, and pri-
mary key
° Role
° Recursive relationship set
• E-R diagram
• Mapping cardinality:
° One-to-one relationship
° One-to-many relationship
° Many-to-one relationship
° Many-to-many relationship
• Total and partial participation
• Weak entity sets and strong entity sets
° Discriminator attributes
° Identifying relationship
• Specialization and generalization
• Aggregation
• Design choices
• United Modeling Language (UML)
 